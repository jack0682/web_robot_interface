#!/bin/bash

# Í∑πÌïú Ìï¥Í≤∞ Î∞©Î≤ï - Î™®Îì† Í≤ÉÏùÑ Ï†ïÎ¶¨ÌïòÍ≥† ÎÜíÏùÄ Ìè¨Ìä∏ Î≤àÌò∏ ÏÇ¨Ïö©
echo "üí£ Í∑πÌïú Ìï¥Í≤∞: ÏôÑÏ†Ñ Ï†ïÎ¶¨ ÌõÑ ÎÜíÏùÄ Ìè¨Ìä∏ ÏÇ¨Ïö©"
echo "============================================="

cd "$(dirname "$0")/.."

echo "1. ÏãúÏä§ÌÖú ÏÉÅÌÉú ÌôïÏù∏..."
echo "   ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê: $(whoami)"
echo "   ÌòÑÏû¨ ÎîîÎ†âÌÜ†Î¶¨: $(pwd)"
echo "   Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ: $(free -h | grep Mem | awk '{print $3}')"

echo ""
echo "2. Í∑πÌïú ÌîÑÎ°úÏÑ∏Ïä§ Ï†ïÎ¶¨..."

# Î™®Îì† Node.js ÌîÑÎ°úÏÑ∏Ïä§ Í∞ïÏ†ú Ï¢ÖÎ£å
echo "   Node.js ÌîÑÎ°úÏÑ∏Ïä§ Í∞ïÏ†ú Ï¢ÖÎ£å..."
pkill -9 -f "node" 2>/dev/null || true
pkill -9 -f "npm" 2>/dev/null || true

# Docker Ïª®ÌÖåÏù¥ÎÑà Ï†ïÏßÄ (ÏûàÎäî Í≤ΩÏö∞)
if command -v docker &> /dev/null; then
    echo "   Docker Ïª®ÌÖåÏù¥ÎÑà Ï†ïÏßÄ..."
    docker stop $(docker ps -q) 2>/dev/null || true
fi

# 8080-8090 Ìè¨Ìä∏ Í∞ïÏ†ú Ìï¥Ï†ú
echo "   8080-8090 Ìè¨Ìä∏ Í∞ïÏ†ú Ìï¥Ï†ú..."
for port in {8080..8090}; do
    PIDS=$(lsof -ti:$port 2>/dev/null)
    if [ -n "$PIDS" ]; then
        echo "      Ìè¨Ìä∏ $port: $PIDS Ï¢ÖÎ£å"
        kill -9 $PIDS 2>/dev/null || true
    fi
done

echo ""
echo "3. ÏãúÏä§ÌÖú Ï†ïÎ¶¨ ÎåÄÍ∏∞..."
sleep 5

echo ""
echo "4. ÎÜíÏùÄ Ìè¨Ìä∏ Î≤àÌò∏ Ï∞æÍ∏∞ (9000~9099)..."
WS_PORT=""
for port in {9001..9020}; do
    if ! netstat -tuln 2>/dev/null | grep ":$port " && ! ss -tuln 2>/dev/null | grep ":$port "; then
        WS_PORT=$port
        echo "   ‚úÖ ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ìè¨Ìä∏ Î∞úÍ≤¨: $port"
        break
    fi
done

if [ -z "$WS_PORT" ]; then
    # Îçî ÎÜíÏùÄ Ìè¨Ìä∏ ÏÇ¨Ïö©
    WS_PORT=9001
    echo "   ‚ö†Ô∏è Í∞ïÏ†úÎ°ú Ìè¨Ìä∏ $WS_PORT ÏÇ¨Ïö©"
fi

echo ""
echo "5. ÏÑ§Ï†ï ÌååÏùº ÏóÖÎç∞Ïù¥Ìä∏ (Ìè¨Ìä∏ $WS_PORT)..."

# .env ÌååÏùº Î∞±ÏóÖ Î∞è ÏóÖÎç∞Ïù¥Ìä∏
if [ -f "mqtt_processor/.env" ]; then
    cp "mqtt_processor/.env" "mqtt_processor/.env.backup.$(date +%s)"
    sed -i "s/WS_PORT=.*/WS_PORT=$WS_PORT/" mqtt_processor/.env
    echo "   ‚úÖ mqtt_processor/.env ÏóÖÎç∞Ïù¥Ìä∏ (Î∞±ÏóÖÎê®)"
else
    echo "   ‚ùå mqtt_processor/.env ÌååÏùº ÏóÜÏùå"
fi

# Backend ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏
if [ -f "backend/src/services/mqttProcessor.js" ]; then
    cp "backend/src/services/mqttProcessor.js" "backend/src/services/mqttProcessor.js.backup.$(date +%s)"
    sed -i "s|ws://localhost:[0-9]*|ws://localhost:$WS_PORT|g" backend/src/services/mqttProcessor.js
    echo "   ‚úÖ backend mqttProcessor.js ÏóÖÎç∞Ïù¥Ìä∏ (Î∞±ÏóÖÎê®)"
else
    echo "   ‚ùå backend mqttProcessor.js ÌååÏùº ÏóÜÏùå"
fi

echo ""
echo "6. Node modules Ï†ïÎ¶¨ (ÌïÑÏöîÏãú)..."
if [ -d "mqtt_processor/node_modules" ] && [ -d "backend/node_modules" ]; then
    echo "   Node modules Ïù¥ÎØ∏ ÏÑ§ÏπòÎê®"
else
    echo "   Node modules ÏÑ§Ïπò ÌïÑÏöî - ÏÑ§Ïπò Ï§ë..."
    cd mqtt_processor && npm install --silent && cd ..
    cd backend && npm install --silent && cd ..
fi

echo ""
echo "7. ÏÑúÎπÑÏä§ ÏãúÏûë ÏãúÎèÑ..."

# ÏûÑÏãú Î°úÍ∑∏ ÌååÏùº ÏÉùÏÑ±
mkdir -p logs
MQTT_LOG="logs/mqtt_start_$(date +%s).log"
BACKEND_LOG="logs/backend_start_$(date +%s).log"

echo "   MQTT Processor ÏãúÏûë..."
cd mqtt_processor
timeout 30 npm start > "../$MQTT_LOG" 2>&1 &
MQTT_PID=$!
cd ..
echo "   MQTT Processor PID: $MQTT_PID (Î°úÍ∑∏: $MQTT_LOG)"

# Îçî Í∏¥ ÎåÄÍ∏∞ ÏãúÍ∞Ñ
echo "   ÏÑúÎπÑÏä§ ÏïàÏ†ïÌôî ÎåÄÍ∏∞..."
sleep 10

# Ìè¨Ìä∏ Ï≤¥ÌÅ¨
if netstat -tuln 2>/dev/null | grep ":$WS_PORT " || ss -tuln 2>/dev/null | grep ":$WS_PORT "; then
    echo "   ‚úÖ MQTT Processor Ìè¨Ìä∏ $WS_PORT ÌôúÏÑ±Ìôî"
    
    echo "   Backend ÏãúÏûë..."
    cd backend
    timeout 30 npm start > "../$BACKEND_LOG" 2>&1 &
    BACKEND_PID=$!
    cd ..
    echo "   Backend PID: $BACKEND_PID (Î°úÍ∑∏: $BACKEND_LOG)"
    
    # Backend Ï§ÄÎπÑ ÎåÄÍ∏∞
    echo "   Backend API Ï§ÄÎπÑ ÎåÄÍ∏∞..."
    for i in {1..20}; do
        if curl -s "http://localhost:5000/health" > /dev/null 2>&1; then
            echo "   ‚úÖ Backend Ï§ÄÎπÑ ÏôÑÎ£å (${i}Ï¥à)"
            break
        fi
        sleep 1
    done
    
else
    echo "   ‚ùå MQTT Processor Ìè¨Ìä∏ ÌôúÏÑ±Ìôî Ïã§Ìå®"
    echo "   Î°úÍ∑∏ ÌôïÏù∏: tail $MQTT_LOG"
fi

echo ""
echo "============================================="
echo "üéØ ÏµúÏ¢Ö Í≤∞Í≥º"
echo "============================================="

# ÌîÑÎ°úÏÑ∏Ïä§ ÏÉÅÌÉú ÌôïÏù∏
echo "Ïã§Ìñâ Ï§ëÏù∏ ÏÑúÎπÑÏä§:"
if [ -n "$MQTT_PID" ] && kill -0 $MQTT_PID 2>/dev/null; then
    echo "‚úÖ MQTT Processor (PID: $MQTT_PID, Ìè¨Ìä∏: $WS_PORT)"
else
    echo "‚ùå MQTT Processor Ïã§Ìñâ Ïã§Ìå®"
    if [ -f "$MQTT_LOG" ]; then
        echo "   ÏóêÎü¨ Î°úÍ∑∏ (ÎßàÏßÄÎßâ 5Ï§Ñ):"
        tail -5 "$MQTT_LOG" | sed 's/^/      /'
    fi
fi

if [ -n "$BACKEND_PID" ] && kill -0 $BACKEND_PID 2>/dev/null; then
    echo "‚úÖ Backend (PID: $BACKEND_PID, Ìè¨Ìä∏: 5000)"
else
    echo "‚ùå Backend Ïã§Ìñâ Ïã§Ìå®"
    if [ -f "$BACKEND_LOG" ]; then
        echo "   ÏóêÎü¨ Î°úÍ∑∏ (ÎßàÏßÄÎßâ 5Ï§Ñ):"
        tail -5 "$BACKEND_LOG" | sed 's/^/      /'
    fi
fi

echo ""
echo "Ìè¨Ìä∏ ÏÉÅÌÉú:"
for port in $WS_PORT 5000; do
    if netstat -tuln 2>/dev/null | grep ":$port " || ss -tuln 2>/dev/null | grep ":$port "; then
        echo "‚úÖ Ìè¨Ìä∏ $port ÌôúÏÑ±"
    else
        echo "‚ùå Ìè¨Ìä∏ $port ÎπÑÌôúÏÑ±"
    fi
done

echo ""
echo "============================================="
echo "üåê ÏÑúÎπÑÏä§ Ï†ïÎ≥¥:"
echo "============================================="
echo "- Backend API: http://localhost:5000"
echo "- Health Check: http://localhost:5000/health"
echo "- WebSocket: ws://localhost:$WS_PORT"
echo ""
echo "ÏÑúÎπÑÏä§ Ï§ëÏßÄ:"
if [ -n "$MQTT_PID" ] && [ -n "$BACKEND_PID" ]; then
    echo "kill $MQTT_PID $BACKEND_PID"
    # PID Ï†ÄÏû•
    echo "mqtt_processor:$MQTT_PID" > .service_pids
    echo "backend:$BACKEND_PID" >> .service_pids
fi
echo ""
echo "Î°úÍ∑∏ ÌååÏùº:"
echo "- MQTT: $MQTT_LOG"
echo "- Backend: $BACKEND_LOG"
echo "============================================="

/**
 * MQTT Client for Robot Web Dashboard
 * EMQX Cloud Integration with WebSocket Bridge + HTTP Status Server
 */

const mqtt = require('mqtt');
const WebSocket = require('ws');
const http = require('http');
const Logger = require('./logger');
const DataBuffer = require('./dataBuffer');
const HandlerManager = require('../handlers');
const fs = require('fs');
const path = require('path');

class MqttClient {
  constructor(config) {
    this.config = {
      mqtt: {
        host: config.mqttHost || 'localhost',
        port: config.mqttPort || 1883,
        username: config.mqttUsername || '',
        password: config.mqttPassword || '',
        protocol: config.mqttPort === 8883 ? 'mqtts' : 'mqtt',
        keepalive: 60,
        reconnectPeriod: config.reconnectInterval || 5000,
        connectTimeout: 30000,
        clean: true,
        clientId: `robot_dashboard_processor_${Date.now()}`
      },
      websocket: {
        port: config.wsPort || 8080
      },
      topics: {
        ros2_topic_list: 'ros2_topic_list',
        weight_sensor: 'topic',
        concentration_target: 'web/target_concentration',
        robot_control: 'robot/control/+',
        system_health: 'system/health',
        sensor_data: 'sensors/+',
        error_messages: 'errors/+'
      },
      buffer: {
        maxSize: config.maxBufferSize || 2000,
        retentionHours: config.dataRetentionHours || 48
      },
      performance: {
        heartbeatInterval: config.heartbeatInterval || 30000,
        maxReconnectAttempts: config.maxReconnectAttempts || 10
      },
      debug: config.debugMode || false,
      verbose: config.enableVerboseLogging || false
    };

    this.logger = new Logger('MqttClient');
    this.mqttClient = null;
    this.wsServer = null;
    this.httpServer = null;
    this.wsClients = new Set();
    this.isConnected = false;
    this.reconnectAttempts = 0;
    this.lastHeartbeat = null;

    // Îç∞Ïù¥ÌÑ∞ Î≤ÑÌçº Ï¥àÍ∏∞Ìôî
    this.dataBuffer = new DataBuffer(this.config.buffer.maxSize);
    
    // Ìï∏Îì§Îü¨ Îß§ÎãàÏ†ÄÎäî initializeÏóêÏÑú ÏÉùÏÑ±
    this.handlerManager = null;
    
    // ROS2 ÌÜ†ÌîΩ Ï∫êÏãú
    this.ros2TopicCache = [];
    
    // ÌÜµÍ≥Ñ Ï†ïÎ≥¥
    this.stats = {
      messagesReceived: 0,
      messagesPublished: 0,
      errorsCount: 0,
      startTime: new Date(),
      lastMessageTime: null
    };
  }

  async initialize() {
    this.logger.info('üîå Initializing MQTT Client...');
    
    try {
      // MQTT ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÉùÏÑ± Î∞è Ïó∞Í≤∞
      await this.connectMqtt();
      
      // WebSocket ÏÑúÎ≤Ñ ÏãúÏûë (HTTP ÏÑúÎ≤Ñ Ìè¨Ìï®)
      await this.startWebSocketServer();
      
      // Ìï∏Îì§Îü¨ Îß§ÎãàÏ†Ä Ï¥àÍ∏∞Ìôî (MQTT Ïó∞Í≤∞ ÌõÑ)
      this.handlerManager = new HandlerManager(this.logger, this.dataBuffer);
      
      // ÌÜ†ÌîΩ Ìï∏Îì§Îü¨ ÏÑ§Ï†ï
      this.setupTopicHandlers();
      
      // ÌïòÌä∏ÎπÑÌä∏ ÏãúÏûë
      this.startHeartbeat();
      
      this.logger.info('‚úÖ MQTT Client initialized successfully');
      return true;
      
    } catch (error) {
      this.logger.error('‚ùå Failed to initialize MQTT Client:', error);
      throw error;
    }
  }

  async connectMqtt() {
    return new Promise((resolve, reject) => {
      const connectionOptions = {
        ...this.config.mqtt,
        will: {
          topic: this.config.topics.system_health,
          payload: JSON.stringify({
            status: 'disconnected',
            message: 'MQTT Processor disconnected unexpectedly',
            timestamp: new Date().toISOString()
          }),
          qos: 1,
          retain: false
        }
      };

      // SSL/TLS ÏÑ§Ï†ï (EMQX CloudÏö©)
      if (this.config.mqtt.protocol === 'mqtts') {
        connectionOptions.rejectUnauthorized = false; // Í∞úÎ∞úÏö© ÏÑ§Ï†ï
      }

      this.logger.info(`üîó Connecting to MQTT broker: ${this.config.mqtt.protocol}://${this.config.mqtt.host}:${this.config.mqtt.port}`);

      this.mqttClient = mqtt.connect(connectionOptions);

      this.mqttClient.on('connect', () => {
        this.isConnected = true;
        this.reconnectAttempts = 0;
        this.logger.info('‚úÖ MQTT connected successfully');
        
        // ÌÜ†ÌîΩ Íµ¨ÎèÖ
        this.subscribeToTopics();
        resolve();
      });

      this.mqttClient.on('error', (error) => {
        this.logger.error('‚ùå MQTT connection error:', error);
        this.isConnected = false;
        this.stats.errorsCount++;
        
        if (this.reconnectAttempts === 0) {
          reject(error);
        }
      });

      this.mqttClient.on('close', () => {
        this.isConnected = false;
        this.logger.warn('‚ö†Ô∏è  MQTT connection closed');
      });

      this.mqttClient.on('reconnect', () => {
        this.reconnectAttempts++;
        this.logger.info(`üîÑ MQTT reconnecting... (attempt ${this.reconnectAttempts})`);
        
        if (this.reconnectAttempts > this.config.performance.maxReconnectAttempts) {
          this.logger.error('‚ùå Max reconnection attempts reached');
          this.mqttClient.end();
        }
      });

      this.mqttClient.on('message', (topic, message) => {
        this.handleMqttMessage(topic, message);
      });
    });
  }

  subscribeToTopics() {
    const topics = Object.values(this.config.topics);
    
    topics.forEach(topic => {
      this.mqttClient.subscribe(topic, { qos: 1 }, (error) => {
        if (error) {
          this.logger.error(`‚ùå Failed to subscribe to ${topic}:`, error);
        } else {
          this.logger.info(`üì° Subscribed to ${topic}`);
        }
      });
    });
  }

  handleMqttMessage(topic, message) {
    try {
      this.stats.messagesReceived++;
      this.stats.lastMessageTime = new Date();
      
      let data;
      try {
        data = JSON.parse(message.toString());
      } catch (parseError) {
        // JSONÏù¥ ÏïÑÎãå Í≤ΩÏö∞ Î¨∏ÏûêÏó¥Î°ú Ï≤òÎ¶¨
        data = message.toString();
      }

      if (this.config.verbose) {
        this.logger.debug(`üì® Message received from ${topic}:`, data);
      }

      // Îç∞Ïù¥ÌÑ∞ Î≤ÑÌçºÏóê Ï†ÄÏû•
      this.dataBuffer.addData(topic, data);

      // Ìï∏Îì§Îü¨ÏóêÍ≤å Î©îÏãúÏßÄ Ï†ÑÎã¨ (Ìï∏Îì§Îü¨ Îß§ÎãàÏ†ÄÍ∞Ä Ï¥àÍ∏∞ÌôîÎêú Í≤ΩÏö∞ÏóêÎßå)
      let handlerResult = null;
      if (this.handlerManager) {
        handlerResult = this.handlerManager.routeMessage(topic, data);
      }
      
      // Ï≤òÎ¶¨ Í≤∞Í≥ºÎ•º WebSocketÏúºÎ°ú Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏
      const broadcastData = {
        type: 'mqtt_message',
        topic,
        data,
        handler_result: handlerResult,
        timestamp: new Date().toISOString()
      };

      this.broadcastToWebSocket(broadcastData);

      // ÌäπÎ≥ÑÌïú ÌÜ†ÌîΩ Ï≤òÎ¶¨
      this.handleSpecialTopics(topic, data, handlerResult);

    } catch (error) {
      this.logger.error(`‚ùå Error handling message from ${topic}:`, error);
      this.stats.errorsCount++;
    }
  }

  handleSpecialTopics(topic, data, handlerResult) {
    // ROS2 ÌÜ†ÌîΩ Î¶¨Ïä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
    if (topic === this.config.topics.ros2_topic_list && handlerResult && handlerResult.result) {
      this.ros2TopicCache = handlerResult.result.topics || [];
      this.logger.info(`üìã ROS2 topic cache updated: ${this.ros2TopicCache.length} topics`);
    }

    // ÏóêÎü¨ Î©îÏãúÏßÄ ÌäπÎ≥Ñ Ï≤òÎ¶¨
    if (topic.startsWith('errors/')) {
      this.handleErrorMessage(topic, data);
    }

    // Î°úÎ¥á Ï†úÏñ¥ Î™ÖÎ†π Î°úÍπÖ
    if (topic.startsWith('robot/control/')) {
      this.logger.info(`üéÆ Robot control command: ${topic}`, data);
    }
  }

  async startWebSocketServer() {
    return new Promise((resolve, reject) => {
      try {
        // HTTP ÏÑúÎ≤Ñ ÏÉùÏÑ±
        this.httpServer = http.createServer((req, res) => {
          this.handleHttpRequest(req, res);
        });

        // WebSocket ÏÑúÎ≤ÑÎ•º HTTP ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞
        this.wsServer = new WebSocket.Server({ 
          server: this.httpServer,
          perMessageDeflate: false
        });

        this.wsServer.on('connection', (ws, request) => {
          this.wsClients.add(ws);
          const clientIP = request.socket.remoteAddress;
          
          this.logger.info(`üîå WebSocket client connected from ${clientIP} (total: ${this.wsClients.size})`);

          // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Íµ¨ÎèÖ Í¥ÄÎ¶¨
          ws.subscriptions = new Set(['*']); // Í∏∞Î≥∏Ï†ÅÏúºÎ°ú Î™®Îì† ÌÜ†ÌîΩ Íµ¨ÎèÖ

          ws.on('message', (message) => {
            try {
              const data = JSON.parse(message);
              this.handleWebSocketMessage(ws, data);
            } catch (error) {
              this.logger.error('‚ùå WebSocket message parsing error:', error);
            }
          });

          ws.on('close', () => {
            this.wsClients.delete(ws);
            this.logger.info(`üîå WebSocket client disconnected (total: ${this.wsClients.size})`);
          });

          ws.on('error', (error) => {
            this.logger.error('‚ùå WebSocket client error:', error);
            this.wsClients.delete(ws);
          });

          // Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°
          this.sendInitialDataToClient(ws);
        });

        // HTTP ÏÑúÎ≤Ñ ÏãúÏûë
        this.httpServer.listen(this.config.websocket.port, () => {
          this.logger.info(`üåê WebSocket + HTTP server started on port ${this.config.websocket.port}`);
          resolve();
        });

        this.httpServer.on('error', (error) => {
          this.logger.error('‚ùå HTTP/WebSocket server error:', error);
          reject(error);
        });

      } catch (error) {
        reject(error);
      }
    });
  }

  handleHttpRequest(req, res) {
    // CORS Ìó§Îçî ÏÑ§Ï†ï
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    if (req.method === 'OPTIONS') {
      res.writeHead(200);
      res.end();
      return;
    }

    // URL ÎùºÏö∞ÌåÖ
    if (req.url === '/' || req.url === '/status') {
      this.handleStatusRequest(req, res);
    } else if (req.url === '/health') {
      this.handleHealthRequest(req, res);
    } else if (req.url === '/stats') {
      this.handleStatsRequest(req, res);
    } else if (req.url === '/favicon.ico') {
      this.handleFaviconRequest(req, res);
    } else {
      res.writeHead(404, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({
        error: 'Not Found',
        message: 'This is a WebSocket server. Connect via ws:// protocol.',
        websocket_url: `ws://localhost:${this.config.websocket.port}`,
        available_endpoints: ['/', '/status', '/health', '/stats']
      }));
    }
  }

  handleStatusRequest(req, res) {
    const status = {
      service: 'Robot Web Dashboard MQTT Processor',
      version: '1.0.0',
      status: 'running',
      mqtt: {
        connected: this.isConnected,
        host: this.config.mqtt.host,
        port: this.config.mqtt.port
      },
      websocket: {
        port: this.config.websocket.port,
        clients: this.wsClients.size,
        url: `ws://localhost:${this.config.websocket.port}`
      },
      uptime: process.uptime(),
      memory: process.memoryUsage(),
      timestamp: new Date().toISOString()
    };

    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify(status, null, 2));
  }

  handleHealthRequest(req, res) {
    const health = {
      status: this.isConnected ? 'healthy' : 'unhealthy',
      checks: {
        mqtt_connection: this.isConnected,
        websocket_server: this.wsServer ? true : false,
        handler_manager: this.handlerManager ? true : false,
        uptime_seconds: process.uptime()
      },
      timestamp: new Date().toISOString()
    };

    const statusCode = health.status === 'healthy' ? 200 : 503;
    res.writeHead(statusCode, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify(health, null, 2));
  }

  handleStatsRequest(req, res) {
    const stats = this.getCurrentStatus();
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify(stats, null, 2));
  }

  handleFaviconRequest(req, res) {
    // Í∞ÑÎã®Ìïú favicon ÏùëÎãµ (Îπà ÏùëÎãµÏúºÎ°ú Ï≤òÎ¶¨)
    res.writeHead(204);
    res.end();
  }

  handleWebSocketMessage(ws, data) {
    switch (data.type) {
      case 'subscribe':
        if (data.topics && Array.isArray(data.topics)) {
          ws.subscriptions = new Set(data.topics);
          this.logger.debug(`üì° Client subscribed to: ${data.topics.join(', ')}`);
        }
        break;

      case 'publish':
        if (data.topic && data.message) {
          this.publishMessage(data.topic, data.message);
        }
        break;

      case 'get_status':
        ws.send(JSON.stringify({
          type: 'status',
          data: this.getCurrentStatus(),
          timestamp: new Date().toISOString()
        }));
        break;

      case 'get_history':
        const history = this.dataBuffer.getData(data.topic || 'all', data.count || 10);
        ws.send(JSON.stringify({
          type: 'history',
          data: history,
          timestamp: new Date().toISOString()
        }));
        break;

      default:
        this.logger.warn(`‚ö†Ô∏è  Unknown WebSocket message type: ${data.type}`);
    }
  }

  sendInitialDataToClient(ws) {
    // ÏãúÏä§ÌÖú ÏÉÅÌÉú Ï†ÑÏÜ°
    setTimeout(() => {
      ws.send(JSON.stringify({
        type: 'initial_data',
        topic: 'system_status',
        data: this.getCurrentStatus(),
        timestamp: new Date().toISOString()
      }));

      // ÏµúÍ∑º ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞
      const recentWeight = this.dataBuffer.getLatestData(this.config.topics.weight_sensor);
      if (recentWeight) {
        ws.send(JSON.stringify({
          type: 'initial_data',
          topic: 'weight_sensor',
          data: recentWeight,
          timestamp: new Date().toISOString()
        }));
      }

      // Ìï∏Îì§Îü¨ ÌÜµÍ≥Ñ (Ìï∏Îì§Îü¨ Îß§ÎãàÏ†ÄÍ∞Ä ÏûàÎäî Í≤ΩÏö∞ÏóêÎßå)
      if (this.handlerManager) {
        const handlerStats = this.handlerManager.getAllStats();
        ws.send(JSON.stringify({
          type: 'initial_data',
          topic: 'handler_stats',
          data: handlerStats,
          timestamp: new Date().toISOString()
        }));
      }
    }, 1000);
  }

  broadcastToWebSocket(data) {
    const message = JSON.stringify(data);
    
    this.wsClients.forEach(ws => {
      if (ws.readyState === WebSocket.OPEN) {
        // Íµ¨ÎèÖ ÌïÑÌÑ∞ÎßÅ (ÏÑ†ÌÉùÏÇ¨Ìï≠)
        if (!ws.subscriptions || ws.subscriptions.has(data.topic) || ws.subscriptions.has('*')) {
          ws.send(message);
        }
      }
    });
  }

  publishMessage(topic, message, options = {}) {
    if (!this.isConnected) {
      this.logger.warn('‚ö†Ô∏è  MQTT not connected. Cannot publish message.');
      return false;
    }

    const payload = typeof message === 'string' ? message : JSON.stringify(message);
    const publishOptions = {
      qos: options.qos || 0,
      retain: options.retain || false,
      ...options
    };
    
    this.mqttClient.publish(topic, payload, publishOptions, (error) => {
      if (error) {
        this.logger.error(`‚ùå Failed to publish to ${topic}:`, error);
      } else {
        this.logger.debug(`üì§ Message published to ${topic}`);
        this.stats.messagesPublished++;
      }
    });

    return true;
  }

  startHeartbeat() {
    setInterval(() => {
      this.lastHeartbeat = new Date().toISOString();
      
      // ÏãúÏä§ÌÖú ÏÉÅÌÉú Î∞úÌñâ
      const systemHealth = {
        status: 'healthy',
        mqtt_connected: this.isConnected,
        ws_clients: this.wsClients.size,
        uptime: process.uptime(),
        memory: process.memoryUsage(),
        handlers: this.handlerManager ? this.handlerManager.getPerformanceMetrics() : null,
        timestamp: this.lastHeartbeat
      };

      this.publishMessage(this.config.topics.system_health, systemHealth);

      this.logger.debug(`üíì Heartbeat sent - MQTT: ${this.isConnected}, WS Clients: ${this.wsClients.size}`);
      
      // Ìï∏Îì§Îü¨ ÏÉÅÌÉú Ï≤¥ÌÅ¨ (Ìï∏Îì§Îü¨ Îß§ÎãàÏ†ÄÍ∞Ä ÏûàÎäî Í≤ΩÏö∞ÏóêÎßå)
      if (this.handlerManager) {
        const healthCheck = this.handlerManager.healthCheck();
        if (healthCheck.status !== 'healthy') {
          this.logger.warn(`‚ö†Ô∏è  Handler health issues: ${healthCheck.issues.join(', ')}`);
        }
      }
    }, this.config.performance.heartbeatInterval);
  }

  setupTopicHandlers() {
    this.logger.info('üîß Setting up topic handlers...');
    
    // ROS2 ÌÜ†ÌîΩ Î¶¨Ïä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ Ïãú Ï∫êÏãú Í∞±Ïã†
    this.dataBuffer.on('data', (topic, data) => {
      if (topic === 'ros2_topic_list' && data.handler_result) {
        this.ros2TopicCache = data.data;
        this.logger.info(`üìã ROS2 topic cache updated: ${this.ros2TopicCache.length} topics`);
      }
      
      // ÏóêÎü¨ Î©îÏãúÏßÄ ÌäπÎ≥Ñ Ï≤òÎ¶¨
      if (topic.includes('error')) {
        this.handleErrorMessage(topic, data);
      }
    });
  }

  handleErrorMessage(topic, data) {
    this.logger.error(`üö® Error message received from ${topic}:`, data);
    
    // ÏóêÎü¨ Î©îÏãúÏßÄÎ•º WebSocketÏúºÎ°ú Ï¶âÏãú Ï†ÑÏÜ°
    this.broadcastToWebSocket({
      type: 'error',
      topic,
      data,
      severity: 'high',
      timestamp: new Date().toISOString()
    });
    
    // ÎπÑÏÉÅÏ†ïÏßÄÍ∞Ä ÌïÑÏöîÌïú Ïã¨Í∞ÅÌïú ÏóêÎü¨Ïù∏ÏßÄ ÌôïÏù∏
    if (this.isEmergencyError(topic, data)) {
      this.logger.error('üö® Emergency error detected - triggering safety response');
      if (this.handlerManager) {
        this.handlerManager.emergencyStop('auto_safety_system');
      }
    }
  }

  isEmergencyError(topic, data) {
    // ÎπÑÏÉÅÏ†ïÏßÄÍ∞Ä ÌïÑÏöîÌïú ÏóêÎü¨ Ìå®ÌÑ¥ ÌôïÏù∏
    const emergencyPatterns = [
      'emergency',
      'safety',
      'collision',
      'overload',
      'temperature',
      'power_failure'
    ];
    
    const topicLower = topic.toLowerCase();
    const dataStr = JSON.stringify(data).toLowerCase();
    
    return emergencyPatterns.some(pattern => 
      topicLower.includes(pattern) || dataStr.includes(pattern)
    );
  }

  // API Î©îÏÑúÎìúÎì§
  getCurrentStatus() {
    return {
      mqtt: {
        connected: this.isConnected,
        host: this.config.mqtt.host,
        port: this.config.mqtt.port,
        client_id: this.config.mqtt.clientId
      },
      websocket: {
        port: this.config.websocket.port,
        clients: this.wsClients.size
      },
      handlers: this.handlerManager ? this.handlerManager.getAllStats() : null,
      stats: this.stats,
      uptime: process.uptime(),
      last_heartbeat: this.lastHeartbeat,
      timestamp: new Date().toISOString()
    };
  }

  getHandlerStats(handlerName = null) {
    if (!this.handlerManager) return null;
    
    if (handlerName) {
      return this.handlerManager.getHandlerStats(handlerName);
    }
    return this.handlerManager.getAllStats();
  }

  setConcentrationTarget(target, source = 'api') {
    if (!this.handlerManager) return false;
    return this.handlerManager.setConcentrationTarget(target, source);
  }

  calibrateWeightSensor(offset = null) {
    if (!this.handlerManager) return false;
    return this.handlerManager.calibrateWeightSensor(offset);
  }

  triggerEmergencyStop(source = 'api') {
    if (!this.handlerManager) return false;
    return this.handlerManager.emergencyStop(source);
  }

  getDataHistory(topic, count = 10) {
    return this.dataBuffer.getData(topic, count);
  }

  async shutdown() {
    this.logger.info('üõë Shutting down MQTT Processor...');
    
    try {
      // Ï¢ÖÎ£å Î©îÏãúÏßÄ Î∞úÌñâ
      if (this.isConnected) {
        const shutdownMessage = {
          status: 'shutting_down',
          message: 'MQTT Processor is shutting down',
          final_stats: {
            uptime: process.uptime(),
            memory: process.memoryUsage(),
            handlers: this.handlerManager ? this.handlerManager.getPerformanceMetrics() : null
          },
          timestamp: new Date().toISOString()
        };
        
        await this.publishMessage(this.config.topics.system_health, shutdownMessage);
      }

      // WebSocket ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Îì§ÏóêÍ≤å Ï¢ÖÎ£å ÏïåÎ¶º
      this.wsClients.forEach(ws => {
        if (ws.readyState === WebSocket.OPEN) {
          ws.send(JSON.stringify({
            type: 'shutdown',
            message: 'MQTT Processor is shutting down',
            timestamp: new Date().toISOString()
          }));
        }
      });

      // Ïû†Ïãú ÎåÄÍ∏∞ ÌõÑ Ïó∞Í≤∞ Ï¢ÖÎ£å
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Ïó∞Í≤∞ Ï¢ÖÎ£å
      if (this.mqttClient) {
        this.mqttClient.end(true);
      }
      
      if (this.httpServer) {
        this.httpServer.close();
      }
      
      this.logger.info('‚úÖ MQTT Processor shutdown complete');
    } catch (error) {
      this.logger.error('‚ùå Error during shutdown:', error);
    }
  }
}

module.exports = MqttClient;